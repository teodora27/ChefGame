//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Settings/InputJucator.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputJucator: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputJucator()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputJucator"",
    ""maps"": [
        {
            ""name"": ""Jucator"",
            ""id"": ""bb4f548f-ac48-4092-9b3f-f0fefb963883"",
            ""actions"": [
                {
                    ""name"": ""Miscare"",
                    ""type"": ""Value"",
                    ""id"": ""e00d4049-df6d-43aa-932d-adb746c5ff7a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interactiune"",
                    ""type"": ""Button"",
                    ""id"": ""bafe9add-bfb0-4dee-ac7e-d5d043de7080"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractiuneAlternativa"",
                    ""type"": ""Button"",
                    ""id"": ""d16f5fec-b7cc-4162-a9f1-f8d2e5a49f75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pauza"",
                    ""type"": ""Button"",
                    ""id"": ""b7aa9aaf-86c5-4cec-834c-3772b07b8b6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""476302d4-6f86-45b0-9712-1bf22782c47d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Miscare"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""81237394-678a-4bc1-8ddd-3a2c0510f38b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Miscare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d60f4ca9-c54a-46df-bf53-e2286294fcc6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Miscare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""75458c26-09aa-47c4-8fb2-0ebce7865ebc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Miscare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0db310a4-5018-4728-bd20-14bc50222e43"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Miscare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Sageti"",
                    ""id"": ""ca9b3bf2-1ec1-461e-ad46-8faa509761aa"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Miscare"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""893c8ebe-1897-44b6-87dc-fb6cddc1e77f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Miscare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e0c24767-22ee-4a08-b8e5-d2fe4c7f540a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Miscare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d565cd39-cf39-4eb3-91b4-a1728abe0ec9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Miscare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""14958a2c-b5c8-4af7-a76c-9a300c76b035"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Miscare"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7c14b600-42d3-489b-8bd6-3d261a950ce8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interactiune"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1ea3cfc-dafe-44fd-9216-9eacd54be178"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteractiuneAlternativa"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""543e13b7-3e4e-426d-b9f4-72235a8dcd34"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pauza"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Jucator
        m_Jucator = asset.FindActionMap("Jucator", throwIfNotFound: true);
        m_Jucator_Miscare = m_Jucator.FindAction("Miscare", throwIfNotFound: true);
        m_Jucator_Interactiune = m_Jucator.FindAction("Interactiune", throwIfNotFound: true);
        m_Jucator_InteractiuneAlternativa = m_Jucator.FindAction("InteractiuneAlternativa", throwIfNotFound: true);
        m_Jucator_Pauza = m_Jucator.FindAction("Pauza", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Jucator
    private readonly InputActionMap m_Jucator;
    private List<IJucatorActions> m_JucatorActionsCallbackInterfaces = new List<IJucatorActions>();
    private readonly InputAction m_Jucator_Miscare;
    private readonly InputAction m_Jucator_Interactiune;
    private readonly InputAction m_Jucator_InteractiuneAlternativa;
    private readonly InputAction m_Jucator_Pauza;
    public struct JucatorActions
    {
        private @InputJucator m_Wrapper;
        public JucatorActions(@InputJucator wrapper) { m_Wrapper = wrapper; }
        public InputAction @Miscare => m_Wrapper.m_Jucator_Miscare;
        public InputAction @Interactiune => m_Wrapper.m_Jucator_Interactiune;
        public InputAction @InteractiuneAlternativa => m_Wrapper.m_Jucator_InteractiuneAlternativa;
        public InputAction @Pauza => m_Wrapper.m_Jucator_Pauza;
        public InputActionMap Get() { return m_Wrapper.m_Jucator; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JucatorActions set) { return set.Get(); }
        public void AddCallbacks(IJucatorActions instance)
        {
            if (instance == null || m_Wrapper.m_JucatorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_JucatorActionsCallbackInterfaces.Add(instance);
            @Miscare.started += instance.OnMiscare;
            @Miscare.performed += instance.OnMiscare;
            @Miscare.canceled += instance.OnMiscare;
            @Interactiune.started += instance.OnInteractiune;
            @Interactiune.performed += instance.OnInteractiune;
            @Interactiune.canceled += instance.OnInteractiune;
            @InteractiuneAlternativa.started += instance.OnInteractiuneAlternativa;
            @InteractiuneAlternativa.performed += instance.OnInteractiuneAlternativa;
            @InteractiuneAlternativa.canceled += instance.OnInteractiuneAlternativa;
            @Pauza.started += instance.OnPauza;
            @Pauza.performed += instance.OnPauza;
            @Pauza.canceled += instance.OnPauza;
        }

        private void UnregisterCallbacks(IJucatorActions instance)
        {
            @Miscare.started -= instance.OnMiscare;
            @Miscare.performed -= instance.OnMiscare;
            @Miscare.canceled -= instance.OnMiscare;
            @Interactiune.started -= instance.OnInteractiune;
            @Interactiune.performed -= instance.OnInteractiune;
            @Interactiune.canceled -= instance.OnInteractiune;
            @InteractiuneAlternativa.started -= instance.OnInteractiuneAlternativa;
            @InteractiuneAlternativa.performed -= instance.OnInteractiuneAlternativa;
            @InteractiuneAlternativa.canceled -= instance.OnInteractiuneAlternativa;
            @Pauza.started -= instance.OnPauza;
            @Pauza.performed -= instance.OnPauza;
            @Pauza.canceled -= instance.OnPauza;
        }

        public void RemoveCallbacks(IJucatorActions instance)
        {
            if (m_Wrapper.m_JucatorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IJucatorActions instance)
        {
            foreach (var item in m_Wrapper.m_JucatorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_JucatorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public JucatorActions @Jucator => new JucatorActions(this);
    public interface IJucatorActions
    {
        void OnMiscare(InputAction.CallbackContext context);
        void OnInteractiune(InputAction.CallbackContext context);
        void OnInteractiuneAlternativa(InputAction.CallbackContext context);
        void OnPauza(InputAction.CallbackContext context);
    }
}
